package com.insurancecompany.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.insurancecompany.dto.InsuranceCompanyDTO;
import com.insurancecompany.entity.ClaimRequest;
import com.insurancecompany.entity.InsuranceCompany;
import com.insurancecompany.exception.ResourceNotFoundException;
import com.insurancecompany.repo.InsuranceCompanyRepository;

@Service
public class InsuranceCompanyServiceImpl implements InsuranceCompanyService {

	@Autowired
	private InsuranceCompanyRepository icRepo;
	
	@Autowired
	private ClaimRequestClient crClient;

	@Override
	public InsuranceCompanyDTO registerInsuranceCompany(InsuranceCompany insuranceComapny) {
		InsuranceCompany savedCompany = icRepo.save(insuranceCompany);
        return convertToDTO(savedCompany);
	}

	@Override
	public InsuranceCompanyDTO getInsuranceCompanyById(Long id) {
		
		InsuranceCompany company = icRepo.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("InsuranceCompany not found with id: " + id));
        return convertToDTO(company);
	}

	@Override
	public InsuranceCompanyDTO updateInsuranceCompany(Long id, InsuranceCompany insuranceComapny) {
		InsuranceCompany exisitingRecord = icRepo.findById(id).orElse(null);
		
		if(exisitingRecord != null) {
			exisitingRecord.setInsuranceCompEmail(insuranceComapny.getInsuranceCompEmail());
			exisitingRecord.setInsuranceCompPwd(insuranceComapny.getInsuranceCompPwd());
			exisitingRecord.setInsuranceCompName(insuranceComapny.getInsuranceCompName());
			return icRepo.save(exisitingRecord);
		}
		return null;
	}

	@Override
	public void deleteInsuranceCompany(Long id) {

		icRepo.deleteById(id);
		
	}

	@Override
	public InsuranceCompanyDTO loginInsuranceCompany(String email, String password) {
		InsuranceCompany exisitingRecord = icRepo.findInsuranceCompanyByEmail(email);
		
		if(exisitingRecord != null && exisitingRecord.getInsuranceCompPwd().equals(password)) {
			return exisitingRecord;
		}
		return null;
	}
	
	@Override
	public List<ClaimRequest> getClaimsByInsuranceCompId(long id) {
		
		System.out.println("Inside insurance service...");
		List<ClaimRequest> list = crClient.getClaimsByInsuranceCompId(id);
		System.out.println(list);
		return list;
	}

	@Override
	public ClaimRequest approveClaim(long id) {
		
		ClaimRequest exisitingClaim = crClient.findById(id);
		if(exisitingClaim != null) {
			exisitingClaim.setLastUpdatedBy("insuranceComp");
			exisitingClaim.setStatus("approved");
			exisitingClaim.setStatusMessage("Claim is approved by insurance companyssss");
			return crClient.save(exisitingClaim);
		}
		return null;
	}

	@Override
	public ClaimRequest revertClaim(long id, String status_message) {
		
		ClaimRequest cr = crClient.findById(id);
		cr.setLastUpdatedBy("insuranceComp");
		cr.setStatus("reverted");
		cr.setStatusMessage(status_message);
		return crClient.save(cr);
	}

	@Override
	public ClaimRequest rejectClaim(long id, String status_message) {
		
		ClaimRequest cr = crClient.findById(id);
		cr.setLastUpdatedBy("insuranceComp");
		cr.setStatus("rejected");
		cr.setStatusMessage(status_message);
		return crClient.save(cr);
	}

	private InsuranceCompanyDTO convertToDTO(InsuranceCompany company) {
        return new InsuranceCompanyDTO(company.getInsuranceCompId(), company.getInsuranceCompName(), company.getInsuranceCompEmail());
    }

}
