package com.patient.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.patient.dto.ApiResponse;
import com.patient.dto.PatientDTO;
import com.patient.entity.ClaimRequest;
import com.patient.entity.Patient;
import com.patient.exception.ResourceNotFoundException;
import com.patient.service.PatientService;

import lombok.AllArgsConstructor;

@RestController
@RequestMapping("/api/patient")
@AllArgsConstructor
public class PatientController {


	private PatientService patSer;
	
	@PostMapping("/signup")
	public Patient registerPatient(@RequestBody Patient patient) {
		return patSer.registerPatient(patient);
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<ApiResponse<PatientDTO>> getPatient(@PathVariable Long id) {
		
//		return patSer.getPatientById(id);
		
		Patient patient = patSer.getPatientById(id);
        if (patient == null) {
            throw new ResourceNotFoundException("Patient not found with id: " + id);
        }
        ApiResponse<PatientDTO> response = new ApiResponse(HttpStatus.NOT_FOUND, "Patient retrieved successfully", null);
//        ApiResponse<Patient> res = new ApiResponse(HttpStatus.OK.value(), "Patient retrieved successfully", patient)
//        ApiResponse<Patient> response = new ApiResponse<>(HttpStatus.OK.value(), "Patient retrieved successfully", patient);
        return new ResponseEntity<>(response, HttpStatus.OK);
		
	}
	
	@PutMapping("/{id}")
	public Patient updatePatient(@PathVariable Long id, @RequestBody Patient patient) {
		return patSer.updatePatient(id, patient);
	}
	
	@DeleteMapping("/{id}")
	public String deletePatient(@PathVariable Long id) {
		patSer.deletePatient(id);
		return "Success";
	}
	
	
	@PostMapping("/login")
	public String loginPatient(@RequestParam String email, @RequestParam String password) {
		Patient patient = patSer.loginPatient(email, password);
		
		if(patient != null) {
			return "Login Success";
		}
		else {
			return "Login failed!!";
		}
	}
	
	@GetMapping("/getClaims/{patientId}")
	public List<ClaimRequest> getClaimByPatientId(@PathVariable long patientId) {
//		System.out.println("inside controller patient get claims");
		return patSer.getClaimsByPatientId(patientId);
	}
			
	@PutMapping("/acceptClaim/{id}")
	public ClaimRequest acceptClaim(@PathVariable long id) {
		return patSer.acceptClaim(id);
	}
	
	@PutMapping("/revertClaim/{id}")
	public ClaimRequest revertClaim(@PathVariable long id, @RequestBody String status_message) {
		return patSer.revertClaim(id, status_message);
	}
	
	@PutMapping("/rejectClaim/{id}")
	public ClaimRequest rejertClaim(@PathVariable long id, @RequestBody String status_message) {
		return patSer.rejectClaim(id, status_message);
	}
	
}
